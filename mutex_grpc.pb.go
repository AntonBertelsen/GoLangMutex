// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriticalSectionServiceClient is the client API for CriticalSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalSectionServiceClient interface {
	Subscribe(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (CriticalSectionService_SubscribeClient, error)
	RequestAccess(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*MessageAcknowledgement, error)
	Done(ctx context.Context, in *DoneMessage, opts ...grpc.CallOption) (*MessageAcknowledgement, error)
}

type criticalSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalSectionServiceClient(cc grpc.ClientConnInterface) CriticalSectionServiceClient {
	return &criticalSectionServiceClient{cc}
}

func (c *criticalSectionServiceClient) Subscribe(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (CriticalSectionService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CriticalSectionService_ServiceDesc.Streams[0], "/GRPCex.CriticalSectionService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &criticalSectionServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CriticalSectionService_SubscribeClient interface {
	Recv() (*AccessGranted, error)
	grpc.ClientStream
}

type criticalSectionServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *criticalSectionServiceSubscribeClient) Recv() (*AccessGranted, error) {
	m := new(AccessGranted)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *criticalSectionServiceClient) RequestAccess(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*MessageAcknowledgement, error) {
	out := new(MessageAcknowledgement)
	err := c.cc.Invoke(ctx, "/GRPCex.CriticalSectionService/RequestAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionServiceClient) Done(ctx context.Context, in *DoneMessage, opts ...grpc.CallOption) (*MessageAcknowledgement, error) {
	out := new(MessageAcknowledgement)
	err := c.cc.Invoke(ctx, "/GRPCex.CriticalSectionService/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalSectionServiceServer is the server API for CriticalSectionService service.
// All implementations must embed UnimplementedCriticalSectionServiceServer
// for forward compatibility
type CriticalSectionServiceServer interface {
	Subscribe(*JoinMessage, CriticalSectionService_SubscribeServer) error
	RequestAccess(context.Context, *RequestMessage) (*MessageAcknowledgement, error)
	Done(context.Context, *DoneMessage) (*MessageAcknowledgement, error)
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

// UnimplementedCriticalSectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalSectionServiceServer struct {
}

func (UnimplementedCriticalSectionServiceServer) Subscribe(*JoinMessage, CriticalSectionService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCriticalSectionServiceServer) RequestAccess(context.Context, *RequestMessage) (*MessageAcknowledgement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedCriticalSectionServiceServer) Done(context.Context, *DoneMessage) (*MessageAcknowledgement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}
func (UnimplementedCriticalSectionServiceServer) mustEmbedUnimplementedCriticalSectionServiceServer() {
}

// UnsafeCriticalSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalSectionServiceServer will
// result in compilation errors.
type UnsafeCriticalSectionServiceServer interface {
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

func RegisterCriticalSectionServiceServer(s grpc.ServiceRegistrar, srv CriticalSectionServiceServer) {
	s.RegisterService(&CriticalSectionService_ServiceDesc, srv)
}

func _CriticalSectionService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CriticalSectionServiceServer).Subscribe(m, &criticalSectionServiceSubscribeServer{stream})
}

type CriticalSectionService_SubscribeServer interface {
	Send(*AccessGranted) error
	grpc.ServerStream
}

type criticalSectionServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *criticalSectionServiceSubscribeServer) Send(m *AccessGranted) error {
	return x.ServerStream.SendMsg(m)
}

func _CriticalSectionService_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServiceServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCex.CriticalSectionService/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServiceServer).RequestAccess(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSectionService_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServiceServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCex.CriticalSectionService/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServiceServer).Done(ctx, req.(*DoneMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CriticalSectionService_ServiceDesc is the grpc.ServiceDesc for CriticalSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCex.CriticalSectionService",
	HandlerType: (*CriticalSectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAccess",
			Handler:    _CriticalSectionService_RequestAccess_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _CriticalSectionService_Done_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _CriticalSectionService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mutex.proto",
}
